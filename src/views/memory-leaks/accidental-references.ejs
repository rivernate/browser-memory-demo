<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Accidental References Memory Leak</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        .container {
            margin: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .description {
            text-align: left;
            max-width: 600px;
        }
        pre {
            background-color: #f1f1f1;
            padding: 10px;
            border-radius: 4px;
            overflow: auto;
            max-width: 600px;
        }
        .heap-size {
            margin-top: 20px;
            font-size: 18px;
        }
        button {
            margin: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Accidental References Memory Leak</h1>
        <div class="description">
            <p><strong>Explanation:</strong> An accidental reference leak occurs when objects are unintentionally kept in memory because references to them are not properly cleared. This can happen if references are kept in closures, event listeners, or global variables.</p>
            <p><strong>Example Code:</strong></p>
            <pre>
let elements = [];

function addElements() {
    for (let i = 0; i < 1000; i++) {
        const element = document.createElement('div');
        document.body.appendChild(element);
        elements.push(element); // Accidental reference
        document.body.removeChild(element);
    }
}
            </pre>
        </div>
        <button id="start-button">Start Leak</button>
        <div id="output"></div>
        <div id="heap-size" class="heap-size">Heap Size: N/A</div>
    </div>
    <script src="/js/accidental-references.js"></script>
</body>
</html>

